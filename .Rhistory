abline(h=out_first_guess['P'],col='red')
abline(h=out_ss_opt['P'],col='red',lty=2)
mean(as)
opt <- optimize(f=ss_anlytic_a,interval=c(1E-15,a)) #note: looks like multi-modal ss surface..
r <- mean(rs)
a <- opt$minimum
h <- mean(hs)
K <- mean(d$H)
m <- mean(ms)
e <- mean(es)
par=c(r=r,h=h,a=a,K=K,m=m,e=e)
out_ss_opt <- sol_anlytic(par)
par(mfrow=c(3,1),mar=c(2,2,2,2))
plot(d$days,d$H,ylim=range(c(d$H,out_first_guess['H'],out_ss_opt['H'])))
abline(h=out_first_guess['H'],col='red')
abline(h=out_ss_opt['H'],col='red',lty=2)
plot(d$days,d$I,ylim=range(c(d$I,out_first_guess['I'],out_ss_opt['I'])))
abline(h=out_first_guess['I'],col='red')
abline(h=out_ss_opt['I'],col='red',lty=2)
plot(d$days,d$P,ylim=range(c(d$P,out_first_guess['P'],out_ss_opt['P']),na.rm=TRUE))
abline(h=out_first_guess['P'],col='red')
abline(h=out_ss_opt['P'],col='red',lty=2)
opt <- optimize(f=ss_anlytic_a,interval=c(1E-12,a)) #note: looks like multi-modal ss surface..
r <- mean(rs)
a <- opt$minimum
h <- mean(hs)
K <- mean(d$H)
m <- mean(ms)
e <- mean(es)
par=c(r=r,h=h,a=a,K=K,m=m,e=e)
out_ss_opt <- sol_anlytic(par)
par(mfrow=c(3,1),mar=c(2,2,2,2))
plot(d$days,d$H,ylim=range(c(d$H,out_first_guess['H'],out_ss_opt['H'])))
abline(h=out_first_guess['H'],col='red')
abline(h=out_ss_opt['H'],col='red',lty=2)
plot(d$days,d$I,ylim=range(c(d$I,out_first_guess['I'],out_ss_opt['I'])))
abline(h=out_first_guess['I'],col='red')
abline(h=out_ss_opt['I'],col='red',lty=2)
plot(d$days,d$P,ylim=range(c(d$P,out_first_guess['P'],out_ss_opt['P']),na.rm=TRUE))
abline(h=out_first_guess['P'],col='red')
abline(h=out_ss_opt['P'],col='red',lty=2)
r <- mean(rs)
#a <- opt$minimum
a <- 0.0109*mean(as)
h <- mean(hs)
K <- mean(d$H)
m <- mean(ms)
e <- mean(es)
par=c(r=r,h=h,a=a,K=K,m=m,e=e)
out_ss_opt <- sol_anlytic(par)
par(mfrow=c(3,1),mar=c(2,2,2,2))
plot(d$days,d$H,ylim=range(c(d$H,out_first_guess['H'],out_ss_opt['H'])))
abline(h=out_first_guess['H'],col='red')
abline(h=out_ss_opt['H'],col='red',lty=2)
plot(d$days,d$I,ylim=range(c(d$I,out_first_guess['I'],out_ss_opt['I'])))
abline(h=out_first_guess['I'],col='red')
abline(h=out_ss_opt['I'],col='red',lty=2)
plot(d$days,d$P,ylim=range(c(d$P,out_first_guess['P'],out_ss_opt['P']),na.rm=TRUE))
abline(h=out_first_guess['P'],col='red')
abline(h=out_ss_opt['P'],col='red',lty=2)
r <- mean(rs)
a <- mean(as)
h <- mean(hs)
K <- mean(d$H)
m <- mean(ms)
e <- mean(es)
par=c(r=r,h=h,a=a,K=K,m=m,e=e)
out_first_guess <- sol_anlytic(par)
par(mfrow=c(3,1),mar=c(2,2,2,2))
plot(d$days,d$H,ylim=range(d$H,out_first_guess['H']))
abline(h=out_first_guess['H'],col='red')
plot(d$days,d$I,ylim=range(d$I,out_first_guess['I']))
abline(h=out_first_guess['I'],col='red')
plot(d$days,d$P,ylim=range(c(d$P,out_first_guess['P']),na.rm=TRUE))
abline(h=out_first_guess['P'],col='red')
opt <- optimize(f=ss_anlytic_a,interval=c(1E-12,a)) #note: looks like multi-modal ss surface..
r <- mean(rs)
#a <- opt$minimum
a <- 0.0109*mean(as)
a
opt <- optimize(f=ss_anlytic_a,interval=c(1.5E-9,2E-9)) #note: looks like multi-modal ss surface..
opt
r <- mean(rs)
a <- opt$minimum
h <- mean(hs)
K <- mean(d$H)
m <- mean(ms)
e <- mean(es)
par=c(r=r,h=h,a=a,K=K,m=m,e=e)
out_ss_opt <- sol_anlytic(par)
par(mfrow=c(3,1),mar=c(2,2,2,2))
plot(d$days,d$H,ylim=range(c(d$H,out_first_guess['H'],out_ss_opt['H'])))
abline(h=out_first_guess['H'],col='red')
abline(h=out_ss_opt['H'],col='red',lty=2)
plot(d$days,d$I,ylim=range(c(d$I,out_first_guess['I'],out_ss_opt['I'])))
abline(h=out_first_guess['I'],col='red')
abline(h=out_ss_opt['I'],col='red',lty=2)
opt <- optimize(f=ss_anlytic_a,interval=c(1E-12,a)) #note: looks like multi-modal ss surface..
r <- mean(rs)
#a <- opt$minimum
a <- 0.0109*mean(as)
h <- mean(hs)
K <- mean(d$H)
m <- mean(ms)
e <- mean(es)
par=c(r=r,h=h,a=a,K=K,m=m,e=e)
out_ss_opt <- sol_anlytic(par)
par(mfrow=c(3,1),mar=c(2,2,2,2))
plot(d$days,d$H,ylim=range(c(d$H,out_first_guess['H'],out_ss_opt['H'])))
abline(h=out_first_guess['H'],col='red')
abline(h=out_ss_opt['H'],col='red',lty=2)
plot(d$days,d$I,ylim=range(c(d$I,out_first_guess['I'],out_ss_opt['I'])))
abline(h=out_first_guess['I'],col='red')
abline(h=out_ss_opt['I'],col='red',lty=2)
plot(d$days,d$P,ylim=range(c(d$P,out_first_guess['P'],out_ss_opt['P']),na.rm=TRUE))
abline(h=out_first_guess['P'],col='red')
abline(h=out_ss_opt['P'],col='red',lty=2)
##################################################################
## STAN FIT   ######################################################
##################################################################
library(rstan)
mod <- stan_model(file='~/dropbox/working/taylor_host_parasite/github/a_optim.stan')
data <- list(N_H_I = length(d$H),
N_P = sum(!is.na(d$P)),
H = d$H,
I = d$I,
P = d$P[!is.na(d$P)],
r = r,
h = h,
K = K,
m = m,
e = e)
initf <- function(){list(a=1E-9,sigma_H=0.2*sd(d$H),sigma_I=0.2*sd(d$I),sigma_P=0.2*sd(d$P,na.rm=TRUE))}
mcmc <- sampling(mod,data=data,init=initf)
post <- extract(mcmc)
hist(post$a)
par(mfrow=c(3,1),mar=c(2,2,2,2))
plot(d$days,d$H)
abline(h=quantile(post$H_pred))
abline(h=out_analytic['H'],col='red')
plot(d$days,d$I)
abline(h=quantile(post$I_pred))
abline(h=out_analytic['I'],col='red')
plot(d$days,d$P)
abline(h=quantile(post$P_pred))
abline(h=out_analytic['P'],col='red')
par(mfrow=c(3,1),mar=c(2,2,2,2))
plot(d$days,d$H)
abline(h=quantile(post$H_pred))
abline(h=out_analytic['H'],col='red')
plot(d$days,d$I)
abline(h=quantile(post$I_pred))
abline(h=out_analytic['I'],col='red')
plot(d$days,d$P)
abline(h=quantile(post$P_pred))
par(mfrow=c(3,1),mar=c(2,2,2,2))
plot(d$days,d$H)
abline(h=quantile(post$H_pred),lty=c(3,2,1,2,3))
abline(h=out_analytic['H'],col='red')
plot(d$days,d$I)
abline(h=quantile(post$I_pred),lty=c(3,2,1,2,3))
abline(h=out_analytic['I'],col='red')
plot(d$days,d$P)
abline(h=quantile(post$P_pred),lty=c(3,2,1,2,3))
abline(h=out_analytic['P'],col='red')
par
r <- mean(rs)
a <- 0.0108*mean(as)
h <- mean(hs)
K <- mean(d$H)
m <- mean(ms)
e <- mean(es)
par=c(r=r,h=h,a=a,K=K,m=m,e=e)
out_ss_opt <- sol_anlytic(par)
par(mfrow=c(3,1),mar=c(2,2,2,2))
plot(d$days,d$H,ylim=range(c(d$H,out_first_guess['H'],out_ss_opt['H'])))
abline(h=out_first_guess['H'],col='red')
abline(h=out_ss_opt['H'],col='red',lty=2)
plot(d$days,d$I,ylim=range(c(d$I,out_first_guess['I'],out_ss_opt['I'])))
abline(h=out_first_guess['I'],col='red')
abline(h=out_ss_opt['I'],col='red',lty=2)
plot(d$days,d$P,ylim=range(c(d$P,out_first_guess['P'],out_ss_opt['P']),na.rm=TRUE))
abline(h=out_first_guess['P'],col='red')
abline(h=out_ss_opt['P'],col='red',lty=2)
r <- mean(rs)
a <- 0.011*mean(as)
h <- mean(hs)
K <- mean(d$H)
m <- mean(ms)
e <- mean(es)
par=c(r=r,h=h,a=a,K=K,m=m,e=e)
out_ss_opt <- sol_anlytic(par)
par(mfrow=c(3,1),mar=c(2,2,2,2))
plot(d$days,d$H,ylim=range(c(d$H,out_first_guess['H'],out_ss_opt['H'])))
abline(h=out_first_guess['H'],col='red')
abline(h=out_ss_opt['H'],col='red',lty=2)
plot(d$days,d$I,ylim=range(c(d$I,out_first_guess['I'],out_ss_opt['I'])))
abline(h=out_first_guess['I'],col='red')
abline(h=out_ss_opt['I'],col='red',lty=2)
plot(d$days,d$P,ylim=range(c(d$P,out_first_guess['P'],out_ss_opt['P']),na.rm=TRUE))
abline(h=out_first_guess['P'],col='red')
abline(h=out_ss_opt['P'],col='red',lty=2)
par(mfrow=c(3,1),mar=c(2,2,2,2))
plot(d$days,d$H,ylim=range(c(d$H,out_first_guess['H'],out_ss_opt['H'])))
abline(h=out_first_guess['H'],col='red')
abline(h=out_ss_opt['H'],col='red',lty=2)
plot(d$days,d$I,ylim=range(c(d$I,out_first_guess['I'],out_ss_opt['I'])))
abline(h=out_first_guess['I'],col='red')
abline(h=out_ss_opt['I'],col='red',lty=2)
plot(d$days,d$P,ylim=range(c(d$P,out_first_guess['P'],out_ss_opt['P']),na.rm=TRUE))
abline(h=out_first_guess['P'],col='red')
abline(h=out_ss_opt['P'],col='red',lty=2)
par(mfrow=c(3,1),mar=c(2,2,2,2))
plot(d$days,d$H)
abline(h=quantile(post$H_pred),lty=c(3,2,1,2,3))
abline(h=out_analytic['H'],col='red')
plot(d$days,d$I)
abline(h=quantile(post$I_pred),lty=c(3,2,1,2,3))
abline(h=out_analytic['I'],col='red')
par(mfrow=c(3,1),mar=c(2,2,2,2))
plot(d$days,d$H)
abline(h=quantile(post$H_pred),lty=c(3,2,1,2,3))
abline(h=out_ss_opt['H'],col='red')
plot(d$days,d$I)
abline(h=quantile(post$I_pred),lty=c(3,2,1,2,3))
abline(h=out_ss_opt['I'],col='red')
plot(d$days,d$P)
abline(h=quantile(post$P_pred),lty=c(3,2,1,2,3))
abline(h=out_ss_opt['P'],col='red')
par(mfrow=c(3,1),mar=c(2,2,2,2))
plot(d$days,d$H)
abline(h=quantile(post$H_pred),lty=c(3,2,1,2,3))
abline(h=out_ss_opt['H'],col='red')
plot(d$days,d$I)
abline(h=quantile(post$I_pred),lty=c(3,2,1,2,3))
abline(h=out_ss_opt['I'],col='red')
plot(d$days,d$P)
abline(h=quantile(post$P_pred),lty=c(3,2,1,2,3))
abline(h=out_ss_opt['P'],col='red')
par(mfrow=c(3,1),mar=c(2,2,2,2))
plot(d$days,d$H)
par(mfrow=c(3,1),mar=c(2,2,2,2))
plot(d$days,d$H,ylim=range(c(d$H,out_first_guess['H'],out_ss_opt['H']))
)
par(mfrow=c(3,1),mar=c(2,2,2,2))
plot(d$days,d$H,ylim=range(c(d$H,out_first_guess['H'],out_ss_opt['H'])))
abline(h=quantile(post$H_pred),lty=c(3,2,1,2,3))
abline(h=out_ss_opt['H'],col='red')
par(mfrow=c(3,1),mar=c(2,2,2,2))
plot(d$days,d$H,ylim=range(c(d$H,out_first_guess['H'],out_ss_opt['H'])))
abline(h=quantile(post$H_pred),lty=c(3,2,1,2,3))
abline(h=out_ss_opt['H'],col='red')
abline(h=out_first_guess['H'],col='red')
par(mfrow=c(3,1),mar=c(2,2,2,2))
plot(d$days,d$H,ylim=range(c(d$H,out_first_guess['H'],out_ss_opt['H'])))
abline(h=quantile(post$H_pred),lty=c(3,2,1,2,3))
abline(h=out_ss_opt['H'],col='red',lty=2)
abline(h=out_first_guess['H'],col='red')
plot(d$days,d$I,ylim=range(c(d$H,out_first_guess['I'],out_ss_opt['I'])))
par(mfrow=c(3,1),mar=c(2,2,2,2))
plot(d$days,d$H,ylim=range(c(d$H,out_first_guess['H'],out_ss_opt['H'])))
abline(h=quantile(post$H_pred),lty=c(3,2,1,2,3))
abline(h=out_ss_opt['H'],col='red',lty=2)
abline(h=out_first_guess['H'],col='red')
plot(d$days,d$I,ylim=range(c(d$I,out_first_guess['I'],out_ss_opt['I'])))
abline(h=quantile(post$I_pred),lty=c(3,2,1,2,3))
abline(h=out_ss_opt['I'],col='red')
par(mfrow=c(3,1),mar=c(2,2,2,2))
plot(d$days,d$H,ylim=range(c(d$H,out_first_guess['H'],out_ss_opt['H'])))
abline(h=quantile(post$H_pred),lty=c(3,2,1,2,3))
abline(h=out_ss_opt['H'],col='red',lty=2)
abline(h=out_first_guess['H'],col='red')
plot(d$days,d$I,ylim=range(c(d$I,out_first_guess['I'],out_ss_opt['I'])))
abline(h=quantile(post$I_pred),lty=c(3,2,1,2,3))
abline(h=out_ss_opt['I'],col='red',lty=2)
abline(h=out_first_guess['I'],col='red')
plot(d$days,d$I,ylim=range(c(d$I,out_first_guess['I'],out_ss_opt['I'])))
abline(h=quantile(post$I_pred),lty=c(3,2,1,2,3))
abline(h=out_ss_opt['I'],col='red',lty=2)
abline(h=out_first_guess['I'],col='red')
plot(d$days,d$P)
abline(h=quantile(post$P_pred),lty=c(3,2,1,2,3))
abline(h=out_first_guess['P'],col='red')
par(mfrow=c(3,1),mar=c(2,2,2,2))
plot(d$days,d$H,ylim=range(c(d$H,out_first_guess['H'],out_ss_opt['H'])))
abline(h=quantile(post$H_pred),lty=c(3,2,1,2,3))
abline(h=out_ss_opt['H'],col='red',lty=2)
abline(h=out_first_guess['H'],col='red')
plot(d$days,d$I,ylim=range(c(d$I,out_first_guess['I'],out_ss_opt['I'])))
abline(h=quantile(post$I_pred),lty=c(3,2,1,2,3))
abline(h=out_ss_opt['I'],col='red',lty=2)
abline(h=out_first_guess['I'],col='red')
plot(d$days,d$P,ylim=range(c(d$P,out_first_guess['P'],out_ss_opt['P'])))
range(c(d$P,out_first_guess['P'],out_ss_opt['P']))
plot(d$days,d$P,ylim=range(c(d$P,out_first_guess['P'],out_ss_opt['P']),na.rm=TRUE))
par(mfrow=c(3,1),mar=c(2,2,2,2))
plot(d$days,d$H,ylim=range(c(d$H,out_first_guess['H'],out_ss_opt['H'])))
abline(h=quantile(post$H_pred),lty=c(3,2,1,2,3))
abline(h=out_ss_opt['H'],col='red',lty=2)
abline(h=out_first_guess['H'],col='red')
plot(d$days,d$I,ylim=range(c(d$I,out_first_guess['I'],out_ss_opt['I'])))
abline(h=quantile(post$I_pred),lty=c(3,2,1,2,3))
abline(h=out_ss_opt['I'],col='red',lty=2)
abline(h=out_first_guess['I'],col='red')
plot(d$days,d$P,ylim=range(c(d$P,out_first_guess['P'],out_ss_opt['P']),na.rm=TRUE))
abline(h=quantile(post$P_pred),lty=c(3,2,1,2,3))
abline(h=out_ss_opt['P'],col='red',lty=2)
abline(h=out_first_guess['P'],col='red')
K
modK <- stan_model(file='~/dropbox/working/taylor_host_parasite/github/a_K_optim.stan')
dataK <- list(N_H_I = length(d$H),
N_P = sum(!is.na(d$P)),
H = d$H,
I = d$I,
P = d$P[!is.na(d$P)],
r = r, h = h, m = m,e = e)
initf <- function(){list(a=1E-9,sigma_H=0.2*sd(d$H),sigma_I=0.2*sd(d$I),sigma_P=0.2*sd(d$P,na.rm=TRUE))}
initfK <- function(){list(a=1E-9,sigma_H=0.2*sd(d$H),sigma_I=0.2*sd(d$I),sigma_P=0.2*sd(d$P,na.rm=TRUE),K=1E4)}
mcmcK <- sampling(modK,data=dataK,init=initfK)
mcmcK
initfK <- function(){list(a=1E-9,sigma_H=0.2*sd(d$H),sigma_I=0.2*sd(d$I),sigma_P=0.2*sd(d$P,na.rm=TRUE),K=1E3)}
mcmcK <- sampling(modK,data=dataK,init=initfK)
mcmcK
rm(list=ls())
library(tidyverse)
d <- read_csv('~/dropbox/working/taylor_host_parasite/data/data.csv')
source('~/dropbox/working/taylor_host_parasite/github/functions.R')
r = 0.62    # host growth (day-1)
h = 2.29    # parasite handling time (days)
a = 2.0E-8  # parasitoid search rate
K = 500000  # carrying capacity (cells/L)
m = 0.33    # parasite mortality rate (days)
e = 55.6    # spores per infection
##--Akashiwo sanguinea parameters--##########
r <- 0.21
a <- 4.4E-7
h <- 2.96
e <- 600
m <- 0.48
K <- 50*10^3
H = 10011  # resources (host cells)
I = 1317   # Infections
P = 411     # Parasite (parasite spores)
par=c(H=H,I=I,P=P,
r=r,h=h,a=a,K=K,m=m,e=e)
##--TIME-STEPPING SPECIFICATION--##################
nyears <- 10
dt     <- 0.1
spec <- list(niter=nyears*365/dt,
save_points=seq(1,5*365,1.0),
#             save_points=d$days,
dt=0.1)
##--SOLUTION -> PLOT--#########################
out_ts <- sol(par,spec)
par(mfrow=c(3,1))
plot(out_ts$H,type='l')
plot(out_ts$I,type='l')
plot(out_ts$P,type='l')
par=c(H=H,I=I,P=P,
r=r,h=h,a=a,K=3*10^3,m=m,e=e)
out_ts <- sol(par,spec)
par(mfrow=c(3,1))
plot(out_ts$H,type='l')
plot(out_ts$I,type='l')
plot(out_ts$P,type='l')
##--SOLVE FOR CASE 2 DIRECTLY WITH ANALYTICAL SOLUTION--###########################
par=c(r=r,h=h,a=a,K=3*10^3,m=m,e=e) #note different length of par vector
out_analytic <- sol_anlytic(par)
par(mfrow=c(3,1))
plot(out_ts$H,type='l')
abline(h=out_analytic['H'],col='red')
plot(out_ts$I,type='l')
abline(h=out_analytic['I'],col='red')
plot(out_ts$P,type='l')
abline(h=out_analytic['P'],col='red')
rs <- c(0.21,0.24,0.35)
as <- c(4.40E-7, 5.58E-8, 1.34E-8)
hs <- c(2.96,2.79,2.46)
es <- c(600,550,40)
ms <- c(0.48,1.02,0.26)
r <- mean(rs)
a <- mean(as)
h <- mean(hs)
K <- mean(d$H)
m <- mean(ms)
e <- mean(es)
par=c(r=r,h=h,a=a,K=K,m=m,e=e)
out_first_guess <- sol_anlytic(par)
par(mfrow=c(3,1),mar=c(2,2,2,2))
plot(d$days,d$H,ylim=range(d$H,out_first_guess['H']))
abline(h=out_first_guess['H'],col='red')
plot(d$days,d$I,ylim=range(d$I,out_first_guess['I']))
abline(h=out_first_guess['I'],col='red')
plot(d$days,d$P,ylim=range(c(d$P,out_first_guess['P']),na.rm=TRUE))
abline(h=out_first_guess['P'],col='red')
##--OPTIMIZE SUM OF SQUARES AS FIRST GUESS--#########################
opt <- optimize(f=ss_anlytic_a,interval=c(1E-12,a)) #note: looks like multi-modal ss surface..
r <- mean(rs)
a <- 0.011*mean(as)
h <- mean(hs)
K <- mean(d$H)
m <- mean(ms)
e <- mean(es)
par=c(r=r,h=h,a=a,K=K,m=m,e=e)
out_ss_opt <- sol_anlytic(par)
par(mfrow=c(3,1),mar=c(2,2,2,2))
plot(d$days,d$H,ylim=range(c(d$H,out_first_guess['H'],out_ss_opt['H'])))
abline(h=out_first_guess['H'],col='red')
abline(h=out_ss_opt['H'],col='red',lty=2)
plot(d$days,d$I,ylim=range(c(d$I,out_first_guess['I'],out_ss_opt['I'])))
abline(h=out_first_guess['I'],col='red')
abline(h=out_ss_opt['I'],col='red',lty=2)
plot(d$days,d$P,ylim=range(c(d$P,out_first_guess['P'],out_ss_opt['P']),na.rm=TRUE))
abline(h=out_first_guess['P'],col='red')
abline(h=out_ss_opt['P'],col='red',lty=2)
##################################################################
## STAN FIT   ######################################################
##################################################################
library(rstan)
##--COMPILE STAN CODE---#######################
mod  <- stan_model(file='~/dropbox/working/taylor_host_parasite/github/a_optim.stan')
##--SETUP DATA AS A LIST FOR STAN--#########################
data <- list(N_H_I = length(d$H),
N_P = sum(!is.na(d$P)),
H = d$H,
I = d$I,
P = d$P[!is.na(d$P)],
r = r, h = h, K = K, m = m,e = e)
##--FUNCTION TO GIVE STAN INITIAL CONDITIONS (BECAUSE SOME RANDOM INITIAL CONDITIONS GIVE INFINITE SOLUTIONS)--#############
initf  <- function(){list(a=1E-9,sigma_H=0.2*sd(d$H),sigma_I=0.2*sd(d$I),sigma_P=0.2*sd(d$P,na.rm=TRUE))}
##--MCMC SAMPLING--####################################
mcmc  <- sampling(mod,data=data,init=initf)
mcmc
##--EXTRACT SAMPLES FROM STAN MCMC OBJECT--#########################
post <- extract(mcmc)
##--PLOT THE POSTERIOR DISTRIBUTION OF a--#############################
hist(post$a)
##--PLOT THE DATA WITH THE SOLUTION--################################
par(mfrow=c(3,1),mar=c(2,2,2,2))
##--PLOT THE DATA WITH THE SOLUTION--################################
par(mfrow=c(3,1),mar=c(2,2,2,2))
##--PLOT THE DATA WITH THE SOLUTION--################################
par(mfrow=c(3,1),mar=c(2,2,2,2))
##--PLOT THE DATA WITH THE SOLUTION--################################
par(mfrow=c(3,1),mar=c(2,2,2,2))
##--PLOT THE DATA WITH THE SOLUTION--################################
par(mfrow=c(3,1),mar=c(2,2,2,2))
##--PLOT THE DATA WITH THE SOLUTION--################################
par(mfrow=c(3,1),mar=c(2,2,2,2))
##--PLOT THE DATA WITH THE SOLUTION--################################
par(mfrow=c(3,1),mar=c(2,2,2,2))
##--PLOT THE DATA WITH THE SOLUTION--################################
par(mfrow=c(3,1),mar=c(2,2,2,2))
plot(d$days,d$H,ylim=range(c(d$H,out_first_guess['H'],out_ss_opt['H'])))
abline(h=quantile(post$H_pred),lty=c(3,2,1,2,3))
abline(h=out_ss_opt['H'],col='red',lty=2)
abline(h=out_first_guess['H'],col='red')
plot(d$days,d$I,ylim=range(c(d$I,out_first_guess['I'],out_ss_opt['I'])))
abline(h=quantile(post$I_pred),lty=c(3,2,1,2,3))
abline(h=out_ss_opt['I'],col='red',lty=2)
abline(h=out_first_guess['I'],col='red')
plot(d$days,d$P,ylim=range(c(d$P,out_first_guess['P'],out_ss_opt['P']),na.rm=TRUE))
abline(h=quantile(post$P_pred),lty=c(3,2,1,2,3))
abline(h=out_ss_opt['P'],col='red',lty=2)
abline(h=out_first_guess['P'],col='red')
rm(list=ls())
library(RColorBrewer)
library(Cairo)
##--SET YOUR WORKING DIRECTORY--###################
setwd('~/dropbox/working/fisheries_uncertainty/github_public')
source('aggregate_function.r')
source('other_functions.r')
d      <- read.csv('data/RAMLDB v4.491 (assessment data only)_timeseries_values_views.csv',stringsAsFactors=FALSE)
stocks <- unique(d$stockid)
yrs    <- 1980:2016
n      <- length(yrs)
##--MEAN TOTAL CATCH WEIGHTS--#######################
tc <- rep(NA,length(stocks))
for(i in 1:length(stocks)){
d_tmp <- d[d$stockid==stocks[i],]
TC    <- d_tmp$TCbest
tc[i] <- mean(TC,na.rm=TRUE)
}; tc[tc=='NaN']=NA
##--AGGREGATIONS--#################################
TOTAL_B        <- aggregate_index(x='TB', approx_all=FALSE)
TOTAL_B_APRX   <- aggregate_index(x='TB', approx_all=TRUE)
TOTAL_SSB      <- aggregate_index(x='SSB',approx_all=FALSE)
TOTAL_SSB_APRX <- aggregate_index(x='SSB',approx_all=TRUE)
TOTAL_U        <- aggregate_index(x='U')
BvB         <- read.csv('data/BvBstocks.csv');      bvb         <- BvB[BvB$year%in%yrs,]
BvBaprx     <- read.csv('data/BvBstocks_aprx.csv'); bvbaprx     <- BvBaprx[BvBaprx$year%in%yrs,]
UvU         <- read.csv('data/UvUstocks.csv');      uvu         <- UvU[UvU$year%in%yrs,]
SSBvSSB     <- read.csv('data/SSBvSSB.csv');        ssbvssb     <- SSBvSSB[SSBvSSB$year%in%yrs,]
SSBvSSBaprx <- read.csv('data/SSBvSSB_aprx.csv');   ssbvssbaprx <- SSBvSSBaprx[SSBvSSBaprx$year%in%yrs,]
###########################################################
## KOBE PLOTS #############################################
###########################################################
alpha  <- 0.7
lincol <- 'grey'
###################################################################
## CALCULATE PROPORTIONS ##########################################
###################################################################
TOTAL_B$proportion[2016]
###################################################################
## CALCULATE PROPORTIONS ##########################################
###################################################################
TOTAL_B$proportion[2016]
TOTAL_U$proportion[2016]
sum(TOTAL_B$xxmsy_trends<0)/length(TOTAL_B$xxmsy_trends)
sum(TOTAL_U$xxmsy_trends>0)/length(TOTAL_U$xxmsy_trends)
sum(TOTAL_B$xxmsy_trends<0)/length(TOTAL_B$xxmsy_trends)
sum(TOTAL_U$xxmsy_trends>0)/length(TOTAL_U$xxmsy_trends)
